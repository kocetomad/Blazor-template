@page "/dashboard"
@using RecyclingApp
@inject ItemSingleton itemSingleton
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Your listings:</h3>

<style>
    .card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 100%;
        border-radius: 5px;

    }
    .edit {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 50%;
        text-align: center;
        float: left;
    }
        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

        .edit:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.8);
        }

    img {
        border-radius: 5px 5px 0 0;
    }

    .container {
        padding: 2px 16px;
    }

    .tags {
        float: left;
        padding-bottom: 1.1rem;
        padding-right: 0.5rem
        margin-right: 0.4rem;
    }

    hr.solid {
        border-top: 3px solid #bbb;
    }
</style>

@if (Items == null) {
    <p><em>Loading...</em></p>
}else
{
    <div class="container-fluid">
        <h1>Grid</h1>
        <div class="row">
            @foreach (var item in Items)
             {
                <div class="col-sm-4" style="padding-bottom:1.1rem">
                    <div class="card">
                        <a style="text-decoration:none; color: black;">

                        <img src=@item.imgs[0].imgmname alt="Avatar" style="width:100%"></a>
                        <a style="text-decoration:none; color: black; padding-bottom:0.7rem">
                        <div class="container" style="padding-bottom:0.7rem">
                            
                            <h4><b>@item.itemname</b></h4>
                                @if (item.itemdesc.Length > 200)
                                {
                                 <p>@item.itemdesc.Substring(0,200)...</p>
                                }else{
                                 <p>@item.itemdesc</p>
                                }
                            <hr class="solid">
                            <div class="tags" style="padding-bottom:1.1rem; padding: 5px; box-shadow:1px 1px 2px purple inset;">@item.iteml</div>
                            <div class="tags" style="padding-right: 0.5rem padding-bottom:1.1rem; padding: 5px; box-shadow:1px 1px 2px purple inset;">@item.itemc</div>                          
                        </div></a>
                        <div style="float:left">
                        <div @onclick="() => deleteItem(item)" class="edit" style="text-align: center;background-color: #ab2e26; border-radius: 0px 0px 0px 5px;"><img src="http://cdn.onlinewebfonts.com/svg/img_398870.png" alt="remove" width="30" height="40">
                    </div>
                    <a href="/edit">
                        <div @onclick="() => selectItem(item)" class="edit" style="text-align: center;background-color: #d4b022; border-radius: 0px 0px 5px 0px;"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Edit_icon_%28the_Noun_Project_30184%29.svg/1024px-Edit_icon_%28the_Noun_Project_30184%29.svg.png" alt="edit" width="30" height="40" href="/edit"></div>
                    </a>
                    </div>
                    </div>
                    
                </div>
            }
        </div>
    </div>
    }
@code {
    private List<Item>? Items;
    private string? filterLocations = "Any";
    private string? filterCategory = "Any";
    private string? options = "";
    private string? user = "";

    private int? index = 0;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User.Identity.Name.ToUpper().Split('\\')[1].Trim();
        //user = "Q519935";
        var auth = authState.User;
        Items = await SQLUtil.getUserItemsAsync(user);

        // placeholder for failed authentication 
        if (auth.Identity.IsAuthenticated)
        {
            Console.WriteLine("authenticated"); }
        else
        {
            Console.WriteLine("not authenticated");
        }


    }

    private void selectItem(Item? e)
    {
        itemSingleton.item = e;
    }

    private async void deleteItem(Item? e)
    {
        await Task.Run(() => {
            Items.Remove(e);
            SQLUtil.deleteListingImgs(e.id);
            SQLUtil.itemDelete(e,user);
        });  
    }

}
